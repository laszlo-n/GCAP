<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simulation</name>
    </assembly>
    <members>
        <member name="T:EFOP.AutomatonPlacementStrategy">
            <summary>
            Lists the available options for how to generate the location of automatons when a simulation is initialized.
            </summary>
        </member>
        <member name="F:EFOP.AutomatonPlacementStrategy.Random">
            <summary>Place automatons randomly.</summary>
        </member>
        <member name="F:EFOP.AutomatonPlacementStrategy.SingleGroup">
            <summary>Place automatons around a single point.</summary>
        </member>
        <member name="F:EFOP.AutomatonPlacementStrategy.MultiGroup">
            <summary>Place automatons in smaller groups around multiple points.</summary>
        </member>
        <member name="F:EFOP.AutomatonPlacementStrategy.Even">
            <summary>Place automatons as far from each other as the starting area allows.</summary>
        </member>
        <member name="T:EFOP.JSONSerializer">
            <summary>
            This class is responsible for serializing chunks into JSON data.
            </summary>
        </member>
        <member name="M:EFOP.JSONSerializer.SerializeChunk(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method is responsible for serializing chunks into JSON data.
            </summary>
            <param name="simulation">The simulation to use.</param>
            <param name="x">The X coordinate of the chunk to serialize.</param>
            <param name="y">The y coordinate of the chunk to serialize.</param>
            <returns>The JSON array created, as a string.</returns>
        </member>
        <member name="T:EFOP.Simulation">
            <summary>
            A class for running simulations with surviving automatons in them.
            </summary>
        </member>
        <member name="E:EFOP.Simulation.RoundPassed">
            <summary>
            This event happens when a round has been computed.
            </summary>
        </member>
        <member name="P:EFOP.Simulation.ID">
            <summary>
            The unique id of this simulation.
            </summary>
            <value>A unique integer value used to identify this simulation.</value>
        </member>
        <member name="M:EFOP.Simulation.OnRoundPassed(System.Int64)">
            <summary>
            This method is used to invoke the round passed event.
            </summary>
            <param name="round">The number of the round tha just passed.</param>
        </member>
        <member name="M:EFOP.Simulation.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a simulation of infinite size with the default configuration.
            </summary>
        </member>
        <member name="M:EFOP.Simulation.Start(System.Int32)">
            <summary>
            Starts the simulation to run a given number of rounds or indefinitely if no maximum number is given.
            If the simulation is already running, this method sets the number of maximum rounds to the new value and then returns.
            </summary>
            <param name="maxRounds">The number of rounds after which to stop.</param>
        </member>
        <member name="M:EFOP.Simulation.Stop">
            <summary>
            Stops a running simulation. If the simulation isn't running, this method does nothing.
            </summary>
        </member>
        <member name="M:EFOP.Simulation.GetIdFromDataDirectory(System.String)">
            <summary>
            Gets the ID of a simulation from the name of its data directory.
            </summary>
            <returns>An int value which is the id of the simulation, or -1 if the path isn't a valid path.</returns>
        </member>
        <member name="M:EFOP.Simulation.PlaceChildAutomaton(System.Drawing.Point,EFOP.WorldElements.Automaton)">
            <summary>
            Generates a new child automaton for the given automaton and places it in its surroundings if possible.
            </summary>
            <param name="location">The location of the parent automaton.</param>
            <param name="parent">The parent automaton.</param>
            <returns>
            A (bool, Point, Automaton) tuple.
            The first value indicates success.
            The second value is the new location of the child automaton, if successful, (0, 0) otherwise.
            The third value is the child automaton.
            </returns>
        </member>
        <member name="M:EFOP.Simulation.PlaceAutomaton(System.Drawing.Point,EFOP.WorldElements.Automaton,System.Boolean)">
            <summary>
            Places the given automaton to the given place. If no automaton is given, this method will create one and place that down.
            </summary>
            <param name="location">The location to put the given automaton to.</param>
            <param name="a">The automaton to put the given place. If null, a new randomly wired automaton will be created.</param>
            <param name="temporarily">A flag for placing the automaton without modifying the current valid state.</param>
            <returns>True if the automaton replaced something else, false if the given place was empty before.</returns>
        </member>
        <member name="T:EFOP.RoundPassedEventArgs">
            <summary>
            Stores the event data for the <see cref="E:EFOP.Simulation.RoundPassed" /> event.
            </summary>
        </member>
        <member name="P:EFOP.RoundPassedEventArgs.Round">
            <summary>
            Gets the current round of the simulation.
            </summary>
            <value>The current round of the simulation.</value>
        </member>
        <member name="M:EFOP.RoundPassedEventArgs.#ctor(System.Int64)">
            <summary>
            Initializes a new RoundPassedEventArgs instance with the given round.
            </summary>
            <param name="roundNum">The given round.</param>
        </member>
        <member name="M:EFOP.WorldChunk.SetContent(EFOP.WorldElements.ICellContent,System.Drawing.Point,System.Boolean)">
            <summary>
            Replaces the content of the given cell with new content.
            </summary>
            <param name="content">The content to put in the given location.</param>
            <param name="relativeLocation">The location of the cell where the new content will be put.</param>
            <param name="temporarily">A flag whether to make this change in the temporary storage or the permanent one.</param>
            <returns>A value representing whether the cell at the given location was already occupied before placing new content there.</returns>
        </member>
        <member name="T:EFOP.WorldElements.Automaton">
            <summary>
            Represents a finite state automaton.
            The automaton's states are the directions it can move and its state changes are its surroundings.
            </summary>
        </member>
        <member name="F:EFOP.WorldElements.Automaton.Surroundings">
            <summary>
            Contains a list of all possible movement directions in left to bottomleft order.
            </summary>
        </member>
        <member name="E:EFOP.WorldElements.Automaton.Multiply">
            <summary>
            This event fires when the wellbeing of this automaton reaches 100% and it can multiply.
            </summary>
        </member>
        <member name="M:EFOP.WorldElements.Automaton.OnMultiply">
            <summary>
            Call this method when you want to fire the <see cref="E:EFOP.WorldElements.Automaton.Multiply" /> event.
            </summary>
        </member>
        <member name="E:EFOP.WorldElements.Automaton.Die">
            <summary>
            This event fires when the wellbeing of this automaton reaches 0% and it should be deleted.
            </summary>
        </member>
        <member name="M:EFOP.WorldElements.Automaton.OnDie">
            <summary>
            Call this method when you want to fire the <see cref="E:EFOP.WorldElements.Automaton.Die" /> event.
            </summary>
        </member>
        <member name="P:EFOP.WorldElements.Automaton.WellBeingPercent">
            <summary>
            Gets the wellbeing of this automaton. This is a byte value between 0 and 100.
            </summary>
            <value>The wellbeing of this automaton.</value>
        </member>
        <member name="P:EFOP.WorldElements.Automaton.MultiplyCount">
            <summary>
            Gets or sets the number of times this automaton can multiply based on its previous feedings and hurtings.
            </summary>
            <value>The number of times this automaton can multiply.</value>
        </member>
        <member name="P:EFOP.WorldElements.Automaton.IsDead">
            <summary>
            Gets whether or not this automaton is dead, aka it's well being is at 0%.
            </summary>
            <value>A boolean value representing whether or not this automaton is dead.</value>
        </member>
        <member name="P:EFOP.WorldElements.Automaton.UID">
            <see cref="P:EFOP.WorldElements.ICellContent.UID"/>
        </member>
        <member name="P:EFOP.WorldElements.Automaton.CharCode">
            <see cref="P:EFOP.WorldElements.ICellContent.CharCode" />
        </member>
        <member name="M:EFOP.WorldElements.Automaton.GetWiring">
            <summary>
            Gets a copy of the wiring of this automaton.
            This is a dictionary consisting of an (int, char) pair (what state, what input) key and an int (new state) value.
            </summary>
            <returns>The wiring of this automaton, an ((int, char), int) dictionary.</returns>
        </member>
        <member name="M:EFOP.WorldElements.Automaton.ComputeState(System.String)">
            <summary>
            Computes the ending state of this automaton using the given input string.
            This method also counts wel-being changes based on the environment given to it.
            </summary>
            <param name="input">The input on which to base state changes.</param>
            <returns>An integer value representing one of the states of this automaton, which is also the direction the automaton decided to move in.</returns>
        </member>
        <member name="M:EFOP.WorldElements.Automaton.UpdateWellBeing(System.Int32,System.Int32)">
            <summary>
            This method updates the well being of this automaton
            It fires the <see cref="E:EFOP.WorldElements.Automaton.Multiply" /> event if it reaches 100%, and fires the <see cref="E:EFOP.WorldElements.Automaton.Die" /> event if it reaches 0%.
            </summary>
            <param name="trees">The number of trees to feed on.</param>
            <param name="lions">The number of lions to fight.</param>
        </member>
        <member name="M:EFOP.WorldElements.Automaton.Feed">
            <summary>
            This method increases the well being percentage of this automaton and fires the <see cref="E:EFOP.WorldElements.Automaton.Multiply" /> event if it reaches 100%.
            After firing the event, the well being is set to 50%.
            </summary>
        </member>
        <member name="M:EFOP.WorldElements.Automaton.Hurt">
            <summary>
            This method decreases the well being percentage of this automaton and fires the <see cref="E:EFOP.WorldElements.Automaton.Die" /> event if it reaches 0%.
            </summary>
        </member>
        <member name="M:EFOP.WorldElements.Automaton.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new <code>Automaton</code> instance with the given UID and a random wiring.
            </summary>
            <param name="uid">The UID of this automaton within the simulation.</param>
            <param name="generateRandomWiring">
            	An optional parameter that indicates whether a random wiring should be generated.
            	If set to false, no wiring is generated. If set to true, the wiring will be generated randomly.
            	This parameter is <code>true</code> by default.
            </param>
        </member>
        <member name="M:EFOP.WorldElements.Automaton.#ctor(System.Int32,EFOP.WorldElements.Automaton,System.Boolean)">
            <summary>
            Creates an automaton from the given parent automaton, using the given new UID.
            Optionally mutates the automaton to have a slightly different wiring from its parent.
            </summary>
            <param name="uid">The UID of this automaton within the simulation.</param>
            <param name="parent">The automaton to use as a base.</param>
            <param name="mutate">A flag indicating whether the wiring should be changed, true by default.</param>
        </member>
        <member name="T:EFOP.WorldElements.MovementDirection">
            <summary>
            Represents a direction in which an automaton can move on a hexagonal plane.
            </summary>
        </member>
        <member name="F:EFOP.WorldElements.MovementDirection.Left">
            <summary>Movement to the left in this layer.</summary>
        </member>
        <member name="F:EFOP.WorldElements.MovementDirection.UpperLeft">
            <summary>Movement to the left in the upper layer.</summary>
        </member>
        <member name="F:EFOP.WorldElements.MovementDirection.UpperRight">
            <summary>Movement to the right in the upper layer.</summary>
        </member>
        <member name="F:EFOP.WorldElements.MovementDirection.Right">
            <summary>Movement to the right in this layer.</summary>
        </member>
        <member name="F:EFOP.WorldElements.MovementDirection.BottomRight">
            <summary>Movement to the right in the bottom layer.</summary>
        </member>
        <member name="F:EFOP.WorldElements.MovementDirection.BottomLeft">
            <summary>Movement to the left in the bottom layer.</summary>
        </member>
        <member name="T:EFOP.WorldElements.ICellContent">
            <summary>
            An interface for contents of cells in a genetic cellular automaton simulation.
            </summary>
        </member>
        <member name="P:EFOP.WorldElements.ICellContent.UID">
            <summary>
            A unique identifier for this object.
            </summary>
            <value>An integer value which is bigger than 0 and unique among all ICellContent objects in a simulation. 0 represents an empty cell and is not used.</value>
        </member>
        <member name="P:EFOP.WorldElements.ICellContent.CharCode">
            <summary>
            A character representing the class this object belongs to.
            This is needed for creating input for automatons.
            </summary>
            <value>A character that is constant inside a class and represents that class in automaton inputs.</value>
        </member>
        <member name="T:EFOP.WorldElements.Tree">
            <summary>
            Represents a tree in a simulation, which is a food source for automatons.
            </summary>
        </member>
        <member name="P:EFOP.WorldElements.Tree.UID">
            <see cref="P:EFOP.WorldElements.ICellContent.UID" />
        </member>
        <member name="P:EFOP.WorldElements.Tree.CharCode">
            <see cref="P:EFOP.WorldElements.ICellContent.CharCode" />
        </member>
        <member name="P:EFOP.WorldElements.Tree.CanBeHarvested">
            <summary>
            A boolean value which tells whether or not this tree object can be used as a food source currently.
            </summary>
            <value><code>true</code> if this tree can be used as a food source, <code>false</code> otherwise.</value>
        </member>
        <member name="M:EFOP.WorldElements.Tree.Harvest(System.Int64)">
            <summary>
            Resets the time this tree needs until it can be harvested next time.
            </summary>
        </member>
        <member name="M:EFOP.WorldElements.Tree.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:EFOP.WorldElements.Tree" /> instance with the given UID and the maximum time until next harvesting.
            </summary>
            <param name="uid">The unique identifier of this <see cref="T:EFOP.WorldElements.ICellContent" /> implementer.</param>
        </member>
        <member name="M:EFOP.WorldElements.Tree.UpdateHarvest(System.Object,EFOP.RoundPassedEventArgs)">
            <summary>
            This method receives a round passed event from its parent simulation and updates the boolean value representing whether this tree can be harvested in this round.
            </summary>
            <param name="sender">The parent simulation.</param>
            <param name="e">An eventargs object containing the new round number.</param>
        </member>
    </members>
</doc>
